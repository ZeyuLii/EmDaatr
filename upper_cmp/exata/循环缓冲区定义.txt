#define MAX_BUFFER_NUM 256   //接受缓冲区的最大个数(大小待定)
#define MAX_DATA_LEN 65536   //一条数据的最大长度（大小待定）

typedef unsigned int uint32_t;
typedef unsigned short uint16_t;
typedef unsigned char uint8_t;


//循环缓冲区定义(暂定)
struct ringBuffer
{
    uint8_t recvFrmData[MAX_BUFFER_NUM][MAX_DATA_LEN]; //用于存放数据的缓存
	//下列数据类型根据MAX_BUFFER_NUM给出
    uint8_t recvFrmHead;  //添加数据的位置
    uint8_t recvFrmTail;  //读取数据的位置
    uint8_t recvFrmNum;  //缓冲区中已经存放的数据个数
    pthread_mutex_t lock;  //写时互斥锁，防止同时对缓冲区进行写操作

    //写缓冲区数据成员函数
    void ringBuffer_put(const uint8_t wBuffer[], uint32_t write_len) {  //uint32_t是根据MAX_DATA_LEN给出
        if(recvFrmNum < MAX_BUFFER_NUM) {
            pthread_mutex_lock(&lock);
            //将要写入的缓冲区置0
            memset(recvFrmData[recvFrmHead], 0, MAX_DATA_LEN);
            //将数据写入缓冲区
            memcpy(recvFrmData[recvFrmHead], wBuffer, write_len);
            //更新缓冲区编号
            recvFrmHead = (recvFrmHead + 1) % MAX_BUFFER_NUM;
            ++recvFrmNum;
            pthread_mutex_unlock(&lock);
        }
    }

    //读缓冲区数据成员函数
    void ringBuffer_get(uint8_t rBuffer[]) {
        if(recvFrmNum > 0 && (sizeof(recvFrmData[recvFrmTail]) > 0)) {
            //读取缓冲区数据
            memcpy(rBuffer, recvFrmData[recvFrmTail], sizeof(recvFrmData[recvFrmTail]));

            //更新缓冲区编号
            recvFrmTail = (recvFrmTail + 1) % MAX_BUFFER_NUM;
            --recvFrmNum;
        }
    }
};